<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jenko</title>
 <link href="https://jenko.me/atom.xml" rel="self"/>
 <link href="https://jenko.me"/>
 <updated>2018-06-13T10:53:26+01:00</updated>
 <id>https://jenko.me</id>
 <author>
   <name>Ian Jenkins</name>
   <email>ian@jenkins-web.co.uk</email>
 </author>

 
 <entry>
   <title>From Gaufrette to Flysystem and back again</title>
   <link href="https://jenko.me/legacy/2017/03/07/from-gaufrette-to-flysystem-and-back-again"/>
   <updated>2017-03-07T00:00:00+00:00</updated>
   <id>https://jenko.me/legacy/2017/03/07/from-gaufrette-to-flysystem-and-back-again</id>
   <content type="html">
&lt;p&gt;When I saw &lt;a href=&quot;https://github.com/KnpLabs/Gaufrette/pull/390&quot;&gt;Gaufrette added a Flysystem adapter&lt;/a&gt; (a year ago to this day!) 
it somewhat captured my imagination and it seemed only right that &lt;a href=&quot;https://github.com/jenkoian/flysystem-gaufrette&quot;&gt;Flysystem should have a Gaufrette adapter&lt;/a&gt; and the two 
file-system abstraction layers could work completely bi-directional.&lt;/p&gt;

&lt;p&gt;It was mostly a bit of fun, although I could potentially see a use case even if that use case hadn’t crept up on me yet.
&lt;strong&gt;Until now!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently worked on a legacy project which made use of &lt;a href=&quot;https://github.com/KnpLabs/Gaufrette&quot;&gt;Gaufrette&lt;/a&gt; and we were taking &lt;a href=&quot;https://twitter.com/ziobrando/status/675305573127208960&quot;&gt;my favourite approach to tackling legacy&lt;/a&gt;.
We were working completely on new code and writing adapters to old stuff which handled a lot of the existing heavy
lifting. So, in the case of file-system abstraction we were writing an adapter to the old Gaufrette stuff, 
but due to a few reasons we were also keen on trying to make use of &lt;a href=&quot;https://github.com/thephpleague/flysystem&quot;&gt;Flysystem&lt;/a&gt;. 
Then I remembered, this silly little library I had created!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“You mean we could work with Flysystem whilst not having to rewrite all of these touch points with Gaufrette”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We were using Symfony, so actually used &lt;a href=&quot;https://github.com/1up-lab/OneupFlysystemBundle&quot;&gt;this bundle&lt;/a&gt; to hook up Flysystem but essentially it just worked like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/b2c40bc307d30a4e398935382fb67812.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pretty neat!&lt;/p&gt;

&lt;p&gt;Obviously, having two file-system abstraction layers is a bit pointless, so eventually it would be nice to completely
move away from Gaufrette, but as a nice compromise to ease over the transition this came in really handy.&lt;/p&gt;

&lt;p&gt;So if you’re in a similar boat and want to transition from Gaufrette to Flysystem give my silly little library a try.&lt;/p&gt;

&lt;p&gt;Finally, I’m not advocating that Flysystem is better than Gaufrette or anything, just that our needs for this particular 
project meant Flysystem was a better fit. They are equally as good as one another and I’m sure in some scenarios Gaufrette 
might have the edge. Indeed, if you wish to transition in the other direction you can always use the &lt;a href=&quot;https://github.com/KnpLabs/Gaufrette/blob/master/doc/adapters/flysystem.md&quot;&gt;Gaufrette Flysystem adapter&lt;/a&gt; :).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Retro fitting Symfony Security into a Legacy App</title>
   <link href="https://jenko.me/legacy/2016/03/21/retro-fitting-symfony-security-into-a-legacy-app"/>
   <updated>2016-03-21T00:00:00+00:00</updated>
   <id>https://jenko.me/legacy/2016/03/21/retro-fitting-symfony-security-into-a-legacy-app</id>
   <content type="html">
&lt;p&gt;In &lt;a href=&quot;http://jenko.me/legacy/2016/02/03/an-escape-route-from-legacy-with-stackphp-and-the-symfony-microkernel/&quot;&gt;my last blog post&lt;/a&gt; I talked about how I had escaped legacy by leveraging the Symfony MicroKernel as well as the new Guard authentication component. Once this was all in place, my next task was to migrate the legacy, home-baked, role based access control to Symfony, so I could make extended use of &lt;a href=&quot;http://symfony.com/doc/current/book/security.html&quot;&gt;Symfony’s fantastic Security component&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;roles--permissions&quot;&gt;Roles &amp;amp; Permissions&lt;/h2&gt;

&lt;p&gt;Having evaluated the current state of play with regards roles and permissions, I had determined that something akin to the following was at play:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Add Content&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Moderate Content&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Edit User&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ROLE_EDITOR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROLE_MODERATOR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROLE_ADMIN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now I knew which roles and permissions I needed to set up, there was going to be two ways in which I needed to protect the app.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Routes - stop users from seeing content should they navigate to a URL that is protected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Template - stop buttons etc… displaying if the user doesn’t have permissions to perform the action the button performs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;route-protection&quot;&gt;Route protection&lt;/h2&gt;

&lt;p&gt;Securing routes in Symfony is actually quite easy. Just some basic configuration and that’s pretty much it!&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/3f38b15298517f99e07b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;However, in my scenario it wasn’t quite this easy. I needed to give the client a simple way to be able to tweak the permissions each role has. So for example, editors may be given the ability to  moderate content at some point. In most applications you’d probably say, just give the editor the  moderator role in that case, but due to the legacy nature and the fact there are many roles and permissions, simply giving a user an extra role, although possible, may be ill-advised. Therefore, the access control in my scenario needed to be something like the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/098695ae18feb8a5c67d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In other words, I needed the permissions to be mapped to the routes rather than the role.&lt;/p&gt;

&lt;p&gt;To achieve this I needed to use a custom RequestMatcher as described in this &lt;a href=&quot;http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-security-using-advanced-request-matchers-to-activate-firewalls/&quot;&gt;excellent blog post from Matthias Noback&lt;/a&gt;. For this to work I simply set up a static map of permissions to roles, I used a php array, but could just as easily be yaml, xml, whatever.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/5fda9fad505e12186bb5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;My &lt;code&gt;RequestMatcher&lt;/code&gt; then looked something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/e5c4d717b2cdb1d8bd97.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then as Noback points out, this all gets configured via a compiler pass:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/bf5ff2c80179b0583285.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;With that in place the next thing to do was to write a custom  &lt;code&gt;PermissionUrlVoter&lt;/code&gt; to vote on whether the user can access the route or not. As we’re not using roles anymore, the core &lt;code&gt;RoleVoter&lt;/code&gt; will abstain from the vote so we need to make sure we have something in it’s place. Here is my custom voter:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/3d7810e8fba57006994b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;getConfigurationRoleMap()&lt;/code&gt; basically extracts roles form a configuration file. The configuration file in question, looks something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/aa182c799aec96f30bed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This allows the client to easily see which permissions apply to which role(s) and, if you throw in a basic page with an &lt;a href=&quot;https://ace.c9.io/&quot;&gt;ace-editor&lt;/a&gt; on, make changes to.&lt;/p&gt;

&lt;p&gt;So all done on route protection right? Well, pretty much. As I have my Symfony application sat alongside the legacy application using &lt;a href=&quot;http://stackphp.com/&quot;&gt;Stack&lt;/a&gt;, it basically attempts to hit the route in the Symfony app, if it encounters a &lt;code&gt;NotFoundException&lt;/code&gt; falls back to the legacy application. The problem with this is that Symfony will forgo the security stuff completely if the route simply doesn’t exist in the Symfony app. The solution for this was relatively straight forward. Define a ‘catch all’ route in the Symfony app so that each request will get through the Symfony routing and into the Security system. It will of course throw a &lt;code&gt;NotFoundException&lt;/code&gt; eventually when it realises there is no controller set up for the route.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/53ed3a789380d2b94015.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This should go beneath any routes you currently have set up in the Symfony app so they continue to work as expected.&lt;/p&gt;

&lt;h2 id=&quot;template-protection&quot;&gt;Template protection&lt;/h2&gt;

&lt;p&gt;For the template protection, Symfony has a wonderful Twig extension which allows you to easily wrap things you want to protect, for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/ffe15e8d271e6b7877e1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In our Symfony application we can use this, with the caveat being that again we want to check permissions rather than roles, e.g.:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/b61c7a2dd30fd9381dd9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;For this to work we require another custom voter:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/8f251a75ee55549a4b6f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This basically checks the users’ role, checks it against the configuration file and votes accordingly.&lt;/p&gt;

&lt;p&gt;So now we have working template protection in the Symfony app, but how about the legacy app? Well, unfortunately it isn’t using Twig so we can’t use the nice Twig extension, nor does it know anything about the Symfony application at all, so we can’t easily grab things out of the container or anything.&lt;/p&gt;

&lt;p&gt;My solution was to create a static facade into the Symfony security bit that does the &lt;code&gt;is_granted&lt;/code&gt; check. For this to work, I ended up having to use the (sorry mum) global keyword to expose the kernel to the legacy app.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/948437a9a5fa56824627.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This allows us to use the following in the legacy code ‘templates’ and well just about anywhere we need to check permissions really:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/869a5e9848921a127801.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h2&gt;

&lt;p&gt;That’s pretty much it as to how I started using the extremely powerful Symfony security in the legacy application I’m working with. The roles and permissions are currently set and updated via a configuration file. The next step though, now that we have all our security features in the Symfony ecosystem would be to look to have some kind of ACL editor.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;One last thing I wanted to touch on is testing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://symfony.com/doc/current/cookbook/security/voters.html&quot;&gt;Symfony voters&lt;/a&gt; are quite easy to test, I’d recommend looking into &lt;a href=&quot;https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Tests/Authorization/Voter/RoleVoterTest.php&quot;&gt;how some of the core voters are tested&lt;/a&gt; if interested in this. Ideally though, you’d have some functional tests which tested the routes that are protected before the security was migrated to the Symfony stuff, i.e. go to this page with this user and make sure you get a 403 response then try with this user and make sure you get a 200 response.&lt;/p&gt;

&lt;p&gt;Another neat thing you could do is use &lt;a href=&quot;https://github.com/daylerees/scientist&quot;&gt;Scientist&lt;/a&gt; to perform ‘experiments’ of this new security code against the existing ‘controlled’ code. This would allow you to ‘trial’ this new security code in production before rolling it out for real. It has things such as journals and reports to allow you to see how your new approach is working out, whether it’s performing in unexpected ways for instance or if it’s performing slower than it’s counterpart.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An escape route from legacy with StackPHP and the Symfony MicroKernel</title>
   <link href="https://jenko.me/legacy/2016/02/03/an-escape-route-from-legacy-with-stackphp-and-the-symfony-microkernel"/>
   <updated>2016-02-03T00:00:00+00:00</updated>
   <id>https://jenko.me/legacy/2016/02/03/an-escape-route-from-legacy-with-stackphp-and-the-symfony-microkernel</id>
   <content type="html">
&lt;p&gt;&lt;em class=&quot;prologue&quot;&gt;I came to, slightly dazed, I was cold and confused, where am I? I tried to take in my surroundings, reams of commented out code to my left, singletons to my right. I don’t know how I got here, but I knew at that point. I was. I was in legacy hell.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although developers generally want to always be working with the latest and greatest, the new shiny if you will, it can’t always be fresh daisies and green fields, every now and again, in fact, probably more often than not, developers have to deal with legacy code, i.e. code written in the past, either by an (&lt;em&gt;obviously inferior&lt;/em&gt;) dev, or even worse themselves.&lt;/p&gt;

&lt;p&gt;Yep, legacy is some what of an occupational hazard. So when I had recently taken ownership of a particularly iniquitous legacy codebase, I wanted to steer clear of it as much as I could, poke it with a stick, give it snide looks, that kind of thing. So this is how I managed to work with modern tech whilst fighting this thankless battle.&lt;/p&gt;

&lt;h2 id=&quot;using-stackphp-to-separate-the-old-from-the-new&quot;&gt;Using StackPHP to separate the old from the new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://stackphp.com/&quot;&gt;StackPHP&lt;/a&gt; is a convention for composing middlewares in PHP. It works with Symfony’s HttpKernelInterface and basically allows you to apply decorators to your application. This idea has become so popular in the PHP community that a &lt;a href=&quot;http://www.php-fig.org/psr/psr-7/&quot;&gt;PSR standard has been adopted&lt;/a&gt; with one of the aims to make it easier to build standardised middlewares.&lt;/p&gt;

&lt;p&gt;We can make use of this approach to easily split requests between a legacy codebase and something more modern, like a Symfony app. Carlos Buenosvinos wrote a brilliant blog post about this which is required reading if this post is proving of any interest: &lt;a href=&quot;http://carlosbuenosvinos.com/migrating-progressively-to-symfony-without-pain-with-stackphp/&quot;&gt;http://carlosbuenosvinos.com/migrating-progressively-to-symfony-without-pain-with-stackphp/&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/641dcca3e47fc321825e.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;where-the-microkernel-fits-in&quot;&gt;Where the MicroKernel fits in&lt;/h2&gt;

&lt;p&gt;The legacy codebase I was dealing with was already large and convoluted with many directories and sub-directories. Adding in an app, a web, a src and whatever other directories seemed overkill and counter intuitive. I know that’s a minor detail and I could have just put them in a separate directory under the root and all probably would have been fine, but even so I wanted to bring in Symfony with the lowest foot print I could.&lt;/p&gt;

&lt;p&gt;Despite always being able to be used as a micro framework, Symfony formally introduced &lt;a href=&quot;http://symfony.com/blog/new-in-symfony-2-8-symfony-as-a-microframework&quot;&gt;‘Symfony as a Microframework’&lt;/a&gt; with a  new MicroKernel trait which allows you create an entire Symfony application from a single class. This fitted my use case perfectly, as it meant I could have a fully functional Symfony with minimal number of files. What was also really nice was that it could grow along with the development of the app. As I start to do more and more work in the Symfony part of the application the more of the framework I can use and the more files and directories I can create.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/6e00d8a8569ce4afa99f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So now I have this lightweight, small footprint Symfony app I needed it to fit in with the legacy app. To the user it should be transparent. On the whole this wasn’t too difficult, the main structure of the page was just HTML which I could just copy into some simple twig templates. The layout did have a few complicated bits though. Firstly, a global language switcher.&lt;/p&gt;

&lt;h2 id=&quot;changing-the-locale-across-the-entire-app&quot;&gt;Changing the locale across the entire app&lt;/h2&gt;

&lt;p&gt;As the existing legacy app already had a mechanism for setting and changing locale, we needed to hook into that in order to set the locale for our Symfony app. This was fairly trivial via a listener.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/f79c6984eba54271d7b4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It’s worth noting here the importance of creating interface and adapters for everything we do with regards the legacy app (and in general really). By doing so we can quite easily swap out the implementation to something newer when we no longer need to support the legacy app. It’s also a great way of ensuring we can add tests without relying on legacy classes. It’s a good refactoring technique too, in his &lt;a href=&quot;http://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052&quot;&gt;seminal book on legacy&lt;/a&gt;, Michael Feathers refers to this as the ‘Extract Interface’ technique.&lt;/p&gt;

&lt;h2 id=&quot;authenticating-the-user-across-the-entire-app&quot;&gt;Authenticating the user across the entire app&lt;/h2&gt;

&lt;p&gt;The last thing I needed to do was handle authentication. It needed to work seamlessly across both the legacy side of the application and the Symfony application.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://symfony.com/doc/current/book/security.html&quot;&gt;security component&lt;/a&gt; within Symfony is super flexible but can be a complicated beast. Fortunately, some work was recently undertaken to simplify it a little and a new component called &lt;a href=&quot;http://symfony.com/blog/new-in-symfony-2-8-guard-authentication-component&quot;&gt;‘Guard’&lt;/a&gt; was created to help.&lt;/p&gt;

&lt;p&gt;There is an excellent cookbook entry on &lt;a href=&quot;http://symfony.com/doc/current/cookbook/security/guard-authentication.html&quot;&gt;‘How to Create a Custom Authentication System with Guard’&lt;/a&gt; which gave me everything I needed. I was basically treating the legacy authentication system like a third party API in this case. It boils down to creating the following: A User class, a UserProvider class, and an Authenticator class. All is covered in excellent detail in the cookbook entry and the &lt;a href=&quot;http://api.symfony.com/3.0/Symfony/Component/Security/Guard/GuardAuthenticatorInterface.html&quot;&gt;docblock of the GuardAuthenticatorInterface&lt;/a&gt;. Here’s mine.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/731628f51b1ea89002e9.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/e66744a3af7125e5670f.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/9dacbc175bf6fd163096.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Most of it is self explanatory and explained well in the documentation. One thing to note for my use case is the following.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/33e87298a93f5eb17f02.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is a simple method which maps roles from the existing authentication system to the new User class used by Symfony. This will ensure the user in Symfony land has the appropriate roles set and means you can make use of Symfony features such as &lt;a href=&quot;http://symfony.com/doc/current/cookbook/security/voters.html&quot;&gt;Voters&lt;/a&gt; and what not.  It means you can do things like &lt;code&gt;if is_granted(‘ROLE_MODERATOR’)&lt;/code&gt; and also use the access control stuff which you can see in the security config in AppKernel.&lt;/p&gt;

&lt;p&gt;So now we have all the elements for the Guard authentication it’s time to hook it all together with some basic config. Here is mine:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/e8a6d4f908c314e8c3f7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see we have access to all the powerful features of the Symfony security component with only a few small classes and crucially, without making any changes to the existing codebase or functionality.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;When faced with the original daunting task of taking on, maintaining and adding new features to this spaghetti bolognese of legacy code I was worried. Having used some OOP techniques and with help from a few nice PHP and Symfony libraries, I feel not only less worried about the future of this project but also enthused and, dare I say, excited to work on it.&lt;/p&gt;

&lt;p&gt;Finally, I saw a tweet just before starting this piece of work which summed up perfectly what I was hoping to achieve and I think sums up this blog post perfectly as well.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How do you make greenfield project with legacy? 1. pretend you&amp;#39;re greenfield 2. write an adapter.&lt;/p&gt;&amp;mdash; Alberto Brandolini (@ziobrando) &lt;a href=&quot;https://twitter.com/ziobrando/status/675305573127208960&quot;&gt;December 11, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Memoirs of a UDiffer</title>
   <link href="https://jenko.me/opinion/2015/09/17/memoirs-of-a-udiffer"/>
   <updated>2015-09-17T00:00:00+01:00</updated>
   <id>https://jenko.me/opinion/2015/09/17/memoirs-of-a-udiffer</id>
   <content type="html">
&lt;p&gt;This evening will see the 34th(?) and final &lt;a href=&quot;http://unifieddiff.co.uk&quot;&gt;Unified Diff&lt;/a&gt;. Unified Diff, or  UDiff as us old timers call it, has been a staple part of my life for the past 3 and a bit years so I wanted to take a bit of time to write up some of my experiences/memoirs of this time. An Ode to UDiff if you will.&lt;/p&gt;

&lt;p&gt;Unified Diff is a local tech meetup in my home (ish) city of Cardiff (gerrit?). It was started by 5 of the smartest guys I’ve ever had the pleasure of working with. In size order: &lt;a href=&quot;http://twitter.com/handybitesize&quot;&gt;Carey&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/gavd_uk&quot;&gt;Gavin&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/craigmarvelley&quot;&gt;Craig&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/rodnaph&quot;&gt;Rhodri&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/woogoose&quot;&gt;Warren&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I somehow managed to worm my way in to make it a 6some, which was kind of an honour. I didn’t want to take such an event for granted so tried to help out as much as I could with the website and filming and what not, and for them to recognise that and get me on board meant a lot.&lt;/p&gt;

&lt;h2 id=&quot;the-early-years&quot;&gt;The Early Years&lt;/h2&gt;

&lt;p&gt;Back in 2012, a tech meet up in Cardiff was badly needed, other than the smaller niche meet ups like &lt;a href=&quot;http://swlug.org.uk/&quot;&gt;SWLUG&lt;/a&gt; and &lt;a href=&quot;http://www.cardiffrb.com/&quot;&gt;Cardiff RB&lt;/a&gt; there wasn’t really anything to serve the wider tech community. UDiff aimed to fill that void.&lt;/p&gt;

&lt;p&gt;The first couple of meet ups were fantastic. We chose a small O’Neills bar, which worked out quite well. In fact I think, for me at least, this was the golden generation of UDiff, I really enjoyed the ‘bar camp’ feel of them which I don’t think we managed to recreate elsewhere. It allowed people to relax, have a drink, get some food if they wished. It also had a good screen and was a perfect size.&lt;/p&gt;

&lt;iframe class=&quot;iframe-video&quot; src=&quot;//player.vimeo.com/video/36267777?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;There were many good talks throughout the O’Neills days, from interesting panel discussions with legends like &lt;a href=&quot;http://twitter.com/stuherbert&quot;&gt;Stu Herbert&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/penllawen&quot;&gt;Richard Gaywood&lt;/a&gt;, to grand reveals of MySpace projects that never materialised.&lt;/p&gt;

&lt;p&gt;The other thing about O’Neills is that it gave me my first experience of public speaking. I had came up with a (somewhat silly) talk idea on a long car journey.&lt;/p&gt;

&lt;p&gt;I had started looking into front end tools a little bit having been solely interested in server side stuff previously so thought I’d give a quick run down of what the in tools were at the time. Nothing too technical just a nice little overview of tools and techniques that were previously completely new to me.&lt;/p&gt;

&lt;p&gt;I wanted to inject a bit of personality into a pretty dull topic so I came up with the title ‘Frontend Awesome SHit Any Nerd can Use’ or ‘FASHANU’ if you will. It basically allowed me to sprinkle in a bunch of &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Fashanu&quot;&gt;John Fashanu&lt;/a&gt; facts and anecdotes to keep the audience from falling asleep. What I thought would be really fun was if I could actually get John to turn up (!?) as a surprise guest and although I knew it was a long shot I thought I’d give it a go anyway. Here is the email exchange between me and his agent in it’s entirety (with some redacting):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/b99a7a12527a89dbf9dd.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So no luck with John Fashanu but the talk went well even though I had a cold and my boss decided to turn up and crank my nerves up to 11 just before hand.&lt;/p&gt;

&lt;iframe class=&quot;iframe-video&quot; src=&quot;//player.vimeo.com/video/42411606?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;h2 id=&quot;the-awkward-adolescence&quot;&gt;The Awkward Adolescence&lt;/h2&gt;

&lt;p&gt;After Warren and Carey managed to get us barred from O’Neills (and a speaker pulling out of talking because the whole experience ruined his zen) we embarked on our teenage phase by meandering around a few venues.&lt;/p&gt;

&lt;p&gt;There were a few flash in the pan venues such as the Promised Land, which was decent but a little small and required Rod to haul a projector half way across Cardiff. Followed by Fire Island (now the &lt;a href=&quot;http://www.urbantaphouse.co.uk/&quot;&gt;Urban Tap House&lt;/a&gt;) which I think held a few events. My good friend &lt;a href=&quot;http://twitter.com/a_thieriot&quot;&gt;Aurélien&lt;/a&gt; talking about &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt; in the pitch black is a fond memory as is my second go at public speaking when I talked about Breaking Bad, I mean &lt;a href=&quot;http://jenko.me/breaking-bugs&quot;&gt;Bugs&lt;/a&gt;.&lt;/p&gt;

&lt;iframe class=&quot;iframe-video&quot; src=&quot;//player.vimeo.com/video/83349876?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;We then settled on &lt;a href=&quot;http://www.porterscardiff.com/&quot;&gt;Porters&lt;/a&gt; for a time, which was pretty good. They had a small cinema-esque room which worked well, but the the venue wasn’t free and was a small walk outside of the city centre. There were some brilliant talks there though, &lt;a href=&quot;https://vimeo.com/83487514&quot;&gt;one that sticks in the memory&lt;/a&gt; is &lt;a href=&quot;http://twitter.com/daylerees&quot;&gt;Dayle Rees’&lt;/a&gt; introduction to &lt;a href=&quot;http://laravel.com&quot;&gt;Laravel&lt;/a&gt; with a live (not actually live) link up with it’s creator &lt;a href=&quot;http://twitter.com/taylorotwell&quot;&gt;Taylor Otwell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/600_306200662.jpeg&quot; alt=&quot;Cinema Room in Porters&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;settling-down&quot;&gt;Settling down&lt;/h2&gt;

&lt;p&gt;The tail end of 2013 saw the opening of a great new collaborative open space for creatives in Cardiff called &lt;a href=&quot;http://foundershub.co.uk&quot;&gt;Founders Hub&lt;/a&gt;. It had a small stage area with projector, PA and good lighting. It was basically the perfect venue for us. This was to become our home for the next year and a bit.&lt;/p&gt;

&lt;p&gt;UDiff &amp;amp; Founders Hub felt like a match made in heaven. We were all geeks talking geeky stuff together in a place decked out for geeks (there were floppy disks blue tacked to the walls for Pete’s sake!). Attendances here were good, &lt;a href=&quot;http://twitter.com/craiginwales&quot;&gt;Craig&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/amienlockwood&quot;&gt;Amie&lt;/a&gt;, the owners of Founders Hub, often kindly ran a small bar and the space was great for chatting to people and getting to know one another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/600_377102622.jpeg&quot; alt=&quot;UDiff @ Founders Hub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were some great talks here on a wide range of topics from &lt;a href=&quot;https://vimeo.com/106176421&quot;&gt;3D printing&lt;/a&gt; to &lt;a href=&quot;https://vimeo.com/99744479&quot;&gt;SEO&lt;/a&gt; to the incredibly successful ‘AWS night’. If I had to pick a favourite talk from this era it was probably &lt;a href=&quot;https://vimeo.com/90738845&quot;&gt;James Cryer’ talk on ‘Janky’&lt;/a&gt; as it opened my eyes up to stuff I didn’t really know about yet.&lt;/p&gt;

&lt;p&gt;Everything at Founders Hub felt right, it was all just so easy and we had settled in to it as our natural home. It was therefore a big shame when Founders Hub announced they were closing at the end of April 2015. Not only a great shame for us but for the creative/tech industry in Cardiff as a whole. We must give thanks to Craig and Amie though for everything they did for us and hope their new ventures are working out well.&lt;/p&gt;

&lt;h2 id=&quot;the-twilight-years&quot;&gt;The Twilight Years&lt;/h2&gt;

&lt;p&gt;With Founders Hub gone, the future of UDiff was up for discussion and although we came close to calling it a day then, we decided to keep it going and we got lucky with a &lt;a href=&quot;http://www.acornpeople.com/&quot;&gt;local recruitment company&lt;/a&gt; offering us a space to run the meet ups with free food and drink. We had been nervous of including recruiters in the past due to the ‘from the community, for the community’ vibe we were going for but we were ensured that there would be minimal sales speak or ‘networking’ and to be fair they were true to their word.&lt;/p&gt;

&lt;p&gt;Although a good size, the venue at Acorn wasn’t perfect. The projector wasn’t brilliant and we struggled a bit with the lighting, particularly as it was Summer. However, the food and drinks provided were brilliant and I’m sure helped get people involved. Also, there were some really strong talks. In fact looking back I don’t think there were any weak ones, they were all really really strong and I’m struggling to pick a favourite but I think &lt;a href=&quot;https://vimeo.com/133746104&quot;&gt;Warren’s talk on Monads&lt;/a&gt; stands out to me, mainly because I really liked his ego-free explanation of it all.&lt;/p&gt;

&lt;iframe class=&quot;iframe-video&quot; src=&quot;//player.vimeo.com/video/133746104?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;We also got to experiment with using &lt;a href=&quot;https://www.periscope.tv/&quot;&gt;Periscope&lt;/a&gt; for live streaming the events at Acorn and it was fun and worked well. Whether people actually tuned in and got much out of it I’m not sure, but it was certainly fun to do and see people pop up on my phone.&lt;/p&gt;

&lt;h2 id=&quot;the-quizzes&quot;&gt;The Quizzes&lt;/h2&gt;

&lt;p&gt;A small aside here to talk about one of my favourite bits of UDiff history, the Christmas Quizzes. They were absolutely brilliant fun and if anyone runs a local meet up I highly suggest you do a quiz at some point. We tended to arrange ours for our Christmas meet up and had such rounds as ‘O’Rly - name the O’reilly book from it’s redacted cover’, ’Guess the legend - guess the famous computer scientist from a picture of them’, ‘Tweet or false - whether tweets from famous computer people were real or fake’ as well as the obligatory regex section. If UDiff does come back in any fashion, I really hope we are able to do some more quizzes.&lt;/p&gt;

&lt;h2 id=&quot;favourites&quot;&gt;Favourites&lt;/h2&gt;

&lt;h3 id=&quot;favourite-talk&quot;&gt;Favourite talk&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/36714130&quot;&gt;Gav D’s clean code talk&lt;/a&gt;. A must watch for anyone interested in becoming a programmer IMO.&lt;/p&gt;

&lt;iframe class=&quot;iframe-video&quot; src=&quot;//player.vimeo.com/video/36714130?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;h3 id=&quot;favourite-venue&quot;&gt;Favourite venue&lt;/h3&gt;

&lt;p&gt;O’Neills. The whole bar camp feel was great.&lt;/p&gt;

&lt;h3 id=&quot;favourite-speaker&quot;&gt;Favourite speaker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/penllawen&quot;&gt;Richard Gaywood&lt;/a&gt;. Spoke confidently and really knew his stuff.&lt;/p&gt;

&lt;h3 id=&quot;favourite-moment&quot;&gt;Favourite moment&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/a_thieriot&quot;&gt;Aurélien&lt;/a&gt; talking about Scala in the dark. Unfortunately not recorded :(&lt;/p&gt;

&lt;h2 id=&quot;see-you-later&quot;&gt;See you later&lt;/h2&gt;

&lt;p&gt;To sum up, UDiff has been brilliant over the 3 (nearly 4) years it has been running. It has felt like mission accomplished in many respects as there are now loads more tech meet ups in Cardiff which I like to think UDiff at least influenced.&lt;/p&gt;

&lt;p&gt;The timing of all this seems apt. All the guys organising are in a much different place to where they were when all this started, people have got married, had babies and so on. It’s a lot harder to find the time and energy basically.&lt;/p&gt;

&lt;p&gt;However, I think we’re going out on a high and you never know, there could be a come back. With that in mind, I’ll end this with how Craig so succinctly put it in our email thread about this decision:&lt;/p&gt;

&lt;p&gt;“Let’s just do an indefinite hiatus like all the best bands do.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/600_276671772.jpeg&quot; alt=&quot;Craig &amp;amp; Rod&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building a house with DDD</title>
   <link href="https://jenko.me/ddd/2015/01/23/building-a-house-with-ddd"/>
   <updated>2015-01-23T00:00:00+00:00</updated>
   <id>https://jenko.me/ddd/2015/01/23/building-a-house-with-ddd</id>
   <content type="html">&lt;p&gt;For the past, I dunno, year or so, I’ve been reading a lot about &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design (DDD)&lt;/a&gt; and even got to try it out on some projects. There are a number of resources which helped me out with this journey, but there are two stand out resources which really got me into it.&lt;/p&gt;

&lt;p&gt;The first was &lt;a href=&quot;https://www.youtube.com/watch?v=ajhqScWECMo&quot;&gt;Ross Tuck’s excellent talk about Models &amp;amp; Service Layers&lt;/a&gt;, if you haven’t watched it yet, then definitely, definitely do. This got me thinking about the tactical parts of DDD such as commands, handlers and &lt;a href=&quot;http://martinfowler.com/bliki/CQRS.html&quot;&gt;CQRS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having opened up a journey into trying out this new approach, reading &lt;a href=&quot;http://www.amazon.co.uk/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&quot;&gt;red&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.co.uk/gp/product/0321125215/ref=pd_lpo_sbs_dp_ss_1/277-9653975-7643565&quot;&gt;blue&lt;/a&gt; books and basically being stoked about it all, along came an article from &lt;a href=&quot;http://everzet.com/&quot;&gt;Everzet&lt;/a&gt; called &lt;a href=&quot;http://everzet.com/post/99045129766/introducing-modelling-by-example&quot;&gt;‘Introducing Modelling by Example’&lt;/a&gt; which took my understanding one step further and helped me understand how BDD fits in with all this.&lt;/p&gt;

&lt;p&gt;Everything seemed to be clicking into place and so I wanted to try it all out. See if this approach worked for me. So I came up with a silly example project to ‘Build a house with DDD’ - note: the title could easily have been ‘Build a house with Modelling by Example’ or ‘Build a house with BDD’ or even ‘Build a house with TDD’ (&lt;a href=&quot;http://vimeo.com/68375232&quot;&gt;as BDD is what TDD is supposed to be right&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;so-here-is-how-i-built-a-house-using-ddd&quot;&gt;So here is how I built a house using DDD&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: I thought it’d be cool to do this commit by commit, gives a nice view of how each change was made etc. Unfortunately I only thought of this half way through writing it, so I am basically now the king of rebasing. Anyway, after I did this I came across &lt;a href=&quot;https://github.com/MarcelloDuarte/pick-my-talks&quot;&gt;a similar project created by Everzet which takes a similar approach&lt;/a&gt;, it’s probably a better example of Modelling by Example (it was his thing after all!), although it doesn’t cover Command Handling etc. it’s &lt;strong&gt;definitely&lt;/strong&gt; worth checking out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/ba1160626505e1f3a5df963bfa974178e6fc391d&quot;&gt;Version0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I set up a fresh Symfony install and added some libraries I thought I would be going to use via composer. With hindsight, this is completely the wrong approach. I started with the framework here because that’s what I had been used to doing, but I actually don’t need the framework until much later in the process. So the lesson here, don’t do this. Don’t set up the framework until you are ready to, if you are using a
framework at all of course. Start with your domain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/f5a95111f479785454cf6cf5b765ca20cb61475b&quot;&gt;Version1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ignore the change to AppKernel which was again me thinking of the framework when I shouldn’t have been.&lt;/p&gt;

&lt;p&gt;I’ve added my first feature file. It contains some examples of how the feature ‘navigating the house’ would work. Looking back, I’m now thinking this should be broken up. So, enter the house is a feature and the scenarios should contain examples of that. Overall though, you get the idea.&lt;/p&gt;

&lt;p&gt;This file is the kind of thing that would derive from the conversation with the client. No code, just language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/f3fc5150db91a0ad1be9d56eb8b0af72a48f0026&quot;&gt;Version2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The change to the behat.yml file is me just trying to tidy up, you can ignore that.&lt;/p&gt;

&lt;p&gt;The changing of “outside the house” to “in the front garden” is just an example of me consolidating the language for consistency. I don’t think this is always appropriate, the language is always primary. However, in some cases I think it can actually help the language to be more consistent on some things.&lt;/p&gt;

&lt;p&gt;Finally, I’ve added a context file which implements &lt;code&gt;SnippetAcceptingContext&lt;/code&gt; which means it can be used to generate some step definitions for me.&lt;/p&gt;

&lt;p&gt;Once this is done, I run &lt;code&gt;bin/behat —append-snippets&lt;/code&gt; to fill the context file with some template step definitions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/9abb0ec5c8d7918537ba84ed28b999798414aab4&quot;&gt;Version3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I start designing my model. The use of &lt;a href=&quot;http://verraes.net/2014/06/named-constructors-in-php/&quot;&gt;Named Constructors&lt;/a&gt; really helps here. It allows me to think purely about the domain at the interface level. This, for me, is where the true power of Modelling by Example is. It’s BDD and indeed TDD in its truest form.&lt;/p&gt;

&lt;p&gt;The fundamental thing to look at, is the language of the model and how it maps so directly the conversation with the client &lt;code&gt;$this-&amp;gt;house-&amp;gt;enterRoom($room)&lt;/code&gt; etc. It’s DDD at play, and is a big step forward to the &lt;code&gt;$this-&amp;gt;house-&amp;gt;setRoom($room)&lt;/code&gt; I may have done in the past.&lt;/p&gt;

&lt;p&gt;It also helps point out gaps in the initial story, considerations that haven’t come up previously and thus making your model more resilient.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/5661411bc0a6f5a0b942f9922150b045709be1c3&quot;&gt;Version4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the point where I move in a level to actually writing the domain models designed from &lt;a href=&quot;http://behat.org&quot;&gt;behat&lt;/a&gt;. Here I use &lt;a href=&quot;http://phpspec.net&quot;&gt;PHPSpec&lt;/a&gt; to aid me in the creation of these models. The benefits of this is that it re-enforces that approach of designing through the interface, but it also ensures mistakes are caught and even more, it basically writes the models for you, with it’s excellent interactive spec runner.&lt;/p&gt;

&lt;p&gt;Finally (no pun intended) you may spot the use of final in front of the class names. I had seen this been used but wasn’t really sure why, until I heard &lt;a href=&quot;https://www.youtube.com/watch?v=UIDlOV40xCY&amp;amp;list=PLo7mBDsRHu123EqX-kXnE2tLYXtdbVuzf#t=2871&quot;&gt;Everzet’s explanation of it at Symfony Live London 2014&lt;/a&gt; and subsequently the &lt;a href=&quot;http://ocramius.github.io/blog/when-to-declare-classes-final/&quot;&gt;excellent blog post by Ocramius on when to use final&lt;/a&gt;. I now see why using final is a great idea and it has even subsequently altered how I think when designing classes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/3dab522b244512d6fbfad70d27d947819d9c16b2&quot;&gt;Version5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some further refactoring of the models basically following the Red -&amp;gt; Green -&amp;gt; Refactor loop at this point. Abstract Rooms and Gardens with Location. Why not just use Location altogether? Perhaps, but wanted to maintain the language. You don’t enter a Location as such, you enter a room or the garden.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/bc7dc0840e634ab22475aee1d5b97a7ad5221427&quot;&gt;Version6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Further refactoring, add a way of entering rooms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/f68fd0975ead6a6a1177732491ed3d29ba021880&quot;&gt;Version7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought it would be neat to be able to enter a room from just a room name, as well as a Room object.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/d125b4a7f5e2ab55ce0910c7c4bd1d240d336f68&quot;&gt;Version8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding a way of exiting a room. Notice it’s very similar to entering a room but it’s important that the language is maintained. We can tidy up the code re-use later, although as a side note I like &lt;a href=&quot;http://verraes.net/2014/08/dry-is-about-knowledge/&quot;&gt;Mathias Verraes’ definition of DRY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/1cd52fe156bfd5a93118aac5348988d08142d028&quot;&gt;Version9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A minor change to the behat context to ensure room can be entered through their name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/56319d09ada9b9a08fe682d697a3973bf36d6bb2&quot;&gt;Version10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we add our first Value Object, Dimensions. Again, using PHPSpec as the crutch to aid the design. Dimensions is defined as a Value Object because it has no identity and is considered equal based on attributes of the class, in this case: width &amp;amp; height. Dimensions can be set on a location.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;http://richardmiller.co.uk/2014/11/06/value-objects/&quot;&gt;Richard Millers post on Value Objects&lt;/a&gt; good if you require more information about them have a read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/a81431f281b154644c0f899afb64ace67b74d50d&quot;&gt;Version11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens if we try and enter a room which doesn’t exist? Let’s add an exception for this.&lt;/p&gt;

&lt;p&gt;It’s important to note at this point that at all work between versions I’m running &lt;code&gt;bin/behat&lt;/code&gt; and &lt;code&gt;bin/phpspec run&lt;/code&gt; constantly and fixing any errors or discrepancies that may arise and using this whole process to shape the domain models.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/802936f09a1c85c06c7b5b572f45d4e76b0b6b69&quot;&gt;Version12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding steps for checking dimensions and exits are available. These weren’t explicit in our initial conversation but through working through the model and subsequent (ok fake in this case) conversations with the client it’s now apparent that dimensions and exits are part of this model. In true DDD style, making the implicit, explicit.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/50fce972753cab2f914a4569762bb4ba99d25b35&quot;&gt;Version13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just removing a no longer required method. Red -&amp;gt; Green -&amp;gt; REFACTOR.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/2712efbf1e3719b0295c3cc547176ad405beb262&quot;&gt;Version14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just me tidying up the behat file. In this contrived example we aren’t going to be doing anything special with potential buyers, so we can just get rid of this explicit context for now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/83cbbd8651af8514211d0c6198b9512e10cb5211&quot;&gt;Version15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that was bothering me was how to exit a room. I didn’t want to have circular references for example. So here I have a property of the previous location so we know where we’ve come from and a way of exiting to a room (notice we’ve tidied up that duplicated code from earlier too).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/2355c7582e8260d7cb03401bfad48fcc30174fe6&quot;&gt;Version16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allowing our Locations to have exits.&lt;/p&gt;

&lt;h2 id=&quot;a-raspberry-pi-without-the-ports&quot;&gt;A Raspberry Pi without the ports&lt;/h2&gt;

&lt;p&gt;Before I move on to the more tactical parts of DDD, let’s stop and think about what we’ve just done. At this point I’d consider the domain model to be quite complete. Of course it could evolve with further conversations with the client, but from what we know of the domain thus far, I think it’s pretty complete.&lt;/p&gt;

&lt;h3 id=&quot;so-what-do-we-have&quot;&gt;So what do we have?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A working domain model&lt;/li&gt;
  &lt;li&gt;Created from the ubiquitous language&lt;/li&gt;
  &lt;li&gt;High level behat stories and lower level PHPSpec tests proving it works&lt;/li&gt;
  &lt;li&gt;We’ve not touched any framework code&lt;/li&gt;
  &lt;li&gt;We’ve kept code to a minimum&lt;/li&gt;
  &lt;li&gt;We’re completely decoupled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We essentially have a &lt;em&gt;Raspberry Pi without any ports&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/pi_bare.jpg&quot; alt=&quot;Raspberry Pi without any ports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you think about &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;the clean architecture&lt;/a&gt; diagram below, we have our middle layer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/CleanArchitecture.jpg&quot; alt=&quot;Clean architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time now to work out from the middle into the other layers. So let’s add some ports onto our Raspberry Pi so we can connect it to something to make it useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/60f9b70ab227785a5e503a4ed88c7da01d98adc9&quot;&gt;Version17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve simply added two commands for entering rooms and exiting rooms at this point. These are two lightweight DTOs that will be used as a means of transferring messages from our framework into our domain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/e4ace656623d57cb78b6c8e5dc9b870b33ef4186&quot;&gt;Version18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A long with commands, I’ve identified an event, &lt;code&gt;EnteredRoomEvent&lt;/code&gt;. This would ordinarily be done through some kind of event storming session with the client.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/0952bb45115bb90786b0b685a0ce04de41cf7091&quot;&gt;Version19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So as you may have noticed I’ve been avoiding persistence throughout this. It’s a small, simple, contrived example which I didn’t want to muddy by adding any means of persistence. I realise this perhaps removes validity to the example, but I don’t really care. This is more about how to model a domain with a modelling by example approach, as opposed to the intricacies of database persistence with DDD.&lt;/p&gt;

&lt;p&gt;However, I did want a tidier way of dealing with the state of the House. Building the house in the constructor every time wasn’t ideal. So I came up with this idea of a factory. Because we all know houses come from factories right? In essence it’s more of a singleton, which works for me here. I’m still building the house on every request, but at least this does it in a clear and re-usable manner. It also doesn’t get me bogged down in persistence when it’s not my primary aim here.&lt;/p&gt;

&lt;p&gt;The final thing to note is that I added some basic handlers to handle the commands I created earlier. These are likely to change but are fine for the time being.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/b8ebbea1bf200e399661f252acc4aee9ff7d2da9&quot;&gt;Version20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding a Symfony bundle and some basic infrastructure.&lt;/p&gt;

&lt;p&gt;Where I say in Version0 I shouldn’t have been adding the framework, it’s in this commit where I should have been.&lt;/p&gt;

&lt;p&gt;Few things to point out here. Firstly, the lightweight controllers. They do little more than take the request, set up the command and pass it off to the handler.&lt;/p&gt;

&lt;p&gt;When I first started this, I was very much of the mindset: decouple from the framework, controllers as services etc. I agree massively with decouple from the framework with regards the domain and even the ports layer (commands/handlers) but, &lt;a href=&quot;http://thatpodcast.io/episodes/episode-10-the-one-with-the-best-practices/&quot;&gt;similar to what Dave mentions in ‘that podcast’ episode 10&lt;/a&gt;, I’ve come a little full circle in the controllers as services and using DI to completely decouple your controllers. I now feel, it doesn’t really matter. So long as your controllers are really light, it doesn’t really matter if they’re tightly coupled, because essentially they don’t matter. They are merely passing messages from framework to domain. The second point to note is that you can see from the images and twig templates how advanced my UI is going to be :).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/73bb68c1d9fe6a9d125191b3e535af3fb1165c09&quot;&gt;Version21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding exits and dimensions to rooms for a fuller experience.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/2c2ec90ebf0d55b5bf30366df99a1dfd31e14077&quot;&gt;Version22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main thing I did in this commit was to add an event dispatcher. I throw a domain event in my model when entering a room and needed the dispatcher in place to support that.&lt;/p&gt;

&lt;p&gt;As I am using Symfony it made sense to me to use the Symfony event dispatcher. However, it is a bit of a pain because it expects an event to have a name and to be of type &lt;code&gt;Symfony\Component\EventDispatcher\Event&lt;/code&gt;. As I was trying to follow the clean architecture and have no outer dependencies I didn’t want to have my event extend &lt;code&gt;Symfony\Component\EventDispatcher\Event&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I needed to create an adapter. Going back to the Raspberry Pi analogy made in a previous version. I needed a Serial to USB adapter, or something like that. I’m starting to add some ports on to my Pi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/pi_ports.jpg&quot; alt=&quot;Raspberry Pi with ports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also wanted to use my own Dispatcher interface, because what if I wanted to stop using the Symfony dispatcher and replace it with something else? I want to be able to continue using the same interface but just add a new adapter and change my DI. I want to be decoupled.&lt;/p&gt;

&lt;p&gt;You can see how I achieved this from the code within this commit. Finally, I added a &lt;code&gt;HandlerInterface&lt;/code&gt; so that I can swap out handlers using DI should I need to also.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/dcb675d273260b6a9e0af7948a26945ca2605a01&quot;&gt;Version23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding an event subscriber to log when a room is entered.&lt;/p&gt;

&lt;p&gt;I again used the adapter approach and created my own interface for logging/event subscribing. I then have an adapter for example using PSRLogger which is easily replaceable should I need to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/4fdc5ed94368ef1656ea80e6fde634a58020cc04&quot;&gt;Version24&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To show off the benefits of decoupling domain from the framework I wanted to show an example of how the domain could be used outside the browser, so I thought it’d be cool to set up a quick CLI example.&lt;/p&gt;

&lt;p&gt;Symfony makes it trivial to add CLI programs, and you can see from this commit how exactly it works. Essentially it’s the same deal as controllers. Request in -&amp;gt; Create command -&amp;gt; Pass off
to Handler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/dddhouse-cli.gif&quot; alt=&quot;CLI version of the house&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jenkoian/ddd-house/commit/a9ca03a9d882cf03d1e8ca48f17f9780a62ec1f5&quot;&gt;Version25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding a command bus and separate out command handling from domain.&lt;/p&gt;

&lt;p&gt;If you’re unsure what a command bus is or does, &lt;a href=&quot;http://shawnmc.cool/command-bus&quot;&gt;I’d recommend Shawn McCools excellent post on them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After initially considering &lt;a href=&quot;https://github.com/tabbi89/CommanderBundle&quot;&gt;CommanderBundle&lt;/a&gt; I eventually opted for &lt;a href=&quot;https://github.com/SimpleBus&quot;&gt;SimpleBus&lt;/a&gt; because I liked the simplicity and have a lot of respect for it’s maintainer Mathias. I did have &lt;a href=&quot;https://github.com/SimpleBus/CommandBus/pull/2&quot;&gt;some misgivings over the use of a type hint for commands&lt;/a&gt;, but generally it suited what I needed to do well, it also forced me to create an explicit CommandHandling layer, which I think works quite well. It’s been completely changed in version 2 now anyway, and is &lt;a href=&quot;https://github.com/SimpleBus/MessageBus&quot;&gt;more of a generic ‘MessageBus’ now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are quite a few command buses that have popped up recently, I created &lt;a href=&quot;https://github.com/jenkoian/CommandBusCommandBus&quot;&gt;CommandBusCommandBus&lt;/a&gt; as a case in point. To be honest with you though, the command bus is a really simple concept and you may even be better off just rolling your own if you don’t need anything fancy. The main reason I went with Simple Bus was because it &lt;a href=&quot;https://github.com/SimpleBus/SymfonyBridge&quot;&gt;hooked into Symfony quite nicely&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyway the point is I wanted to introduce a command bus to make my example complete.&lt;/p&gt;

&lt;p&gt;Here you can see how I’ve moved all the command handling bits to the CommandHandling layer (or ports layer as I’ve heard Ian Cooper describe it) I spoke about above. It just means that rather than passing command to handlers directly, I can just ‘throw’ them on to the command bus now. This has the advantages of being able to decorate the command bus to be able to perform additional tasks against commands should I want to; I can make the command bus handle commands asynchronously should I choose; plus other niceties that arise when delegating message handling in this way.&lt;/p&gt;

&lt;h2 id=&quot;and-were-done&quot;&gt;…and we’re done!&lt;/h2&gt;

&lt;p&gt;You can check out the crib on heroku: &lt;a href=&quot;http://dddhouse.herokuapp.com&quot;&gt;http://dddhouse.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may have guessed from the code but that is indeed the Home Alone house.&lt;/p&gt;

&lt;p&gt;Ok, it’s not going to win any design awards, but with a bit of imagination you can perhaps picture some interactive JS whizzy interface which allows you to hover over doors and enter rooms in a fun way.&lt;/p&gt;

&lt;h2 id=&quot;so-lets-recap-what-weve-done&quot;&gt;So let’s recap what we’ve done&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Created our core domain using Modelling by Example/BDD/TDD&lt;/li&gt;
  &lt;li&gt;Worked our way out from the middle&lt;/li&gt;
  &lt;li&gt;Identified our use cases (commands)&lt;/li&gt;
  &lt;li&gt;Created our infrastructure&lt;/li&gt;
  &lt;li&gt;Added ports into our domain&lt;/li&gt;
  &lt;li&gt;Created adapters to plug our infrastructure into our domain&lt;/li&gt;
  &lt;li&gt;Created a working application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve gone from components to a Raspberry Pi logic board, to a Raspberry Pi with Ports, to a Raspberry Pi with a case - the next step would be to a Raspberry Pi with a fancy case (the JS whizzy version I alluded to above).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jenko.me/assets/img/pi_cycle.png&quot; alt=&quot;Raspberry Pi Cycle&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-do-we-go-from-here&quot;&gt;Where do we go from here?&lt;/h2&gt;

&lt;p&gt;One thing I haven’t tackled yet is end-to-end testing, or acceptance testing.&lt;/p&gt;

&lt;p&gt;For a while, at work, I’ve often thought we were missing a trick in how QA is integrated with development. In that, it isn’t really. It all feels a little ‘thrown over the wall’. Although, I’ve not done anything with regards this at the time of writing I have a few ideas off the back of this as to how to integrate them closer. I’ll use another post to go in to details, but I’m thinking QA could be involved in the initial feature writing (Given/When/Then). Then when it comes to acceptance testing, they write their automated scripts using &lt;a href=&quot;http://watir.com/&quot;&gt;Watir&lt;/a&gt; (what they currently use anyway) and &lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; but re-using the feature files developed for creating our domain.&lt;/p&gt;

&lt;p&gt;So I’m quite keen to give that a go, maybe using the house as a nice example application, or perhaps starting a new internal application. Either way, I’m quite stoked about the possibilities.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Theoretically I was a big fan of this approach and practically it hasn’t altered my view. My domain seems so much more concise, and uses the ubiquitous language in a substantial way. It’s made a number of concepts click for me. Take TDD for example, I’d often liked the idea but didn’t truly understand it. I’d taken a test first approach before, but wasn’t that sold on it. However, this subtle difference in approach to TDD has unlocked it’s power for me. I now think, through a combination of &lt;a href=&quot;http://vimeo.com/68375232&quot;&gt;the excellent talk by Ian Cooper&lt;/a&gt;, and this Modelling by Example approach that I ‘get TDD’. It’s about design, not about testing.&lt;/p&gt;

&lt;p&gt;What I have learned through taking this approach is how DDD can really work for me. Not just the tactical parts either. I feel I now have a better understanding of how to turn conversations directly into code; How to design aggregates around entities and value objects and how to use ports and adapters to ensure decoupling.&lt;/p&gt;

&lt;p&gt;Ok, my example is small and contrived but it’s been enough to expose me to a practical use of these approaches. I’m left with little doubt that this could work on larger projects and have indeed started using it on larger, albeit internal at the moment, projects and have to say it brings everything together quite nicely.&lt;/p&gt;

&lt;p&gt;A silver bullet I’m sure this is not, but I can imagine this kind of thing to work in lots of scenarios. It reduces complexity to the point I can see paths forward in projects where before I may have been scratching my head.&lt;/p&gt;

&lt;p&gt;Finally, the other brilliant thing about all this is the excellent community behind it. The PHP community has really embraced DDD and has really been pushing some of the ideas, but also people like Ian Cooper and Greg Young from the .NET world have become a huge source of inspiration for me.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Some thoughts on Agile</title>
   <link href="https://jenko.me/opinion/2014/08/08/some-thoughts-on-agile"/>
   <updated>2014-08-08T00:00:00+01:00</updated>
   <id>https://jenko.me/opinion/2014/08/08/some-thoughts-on-agile</id>
   <content type="html">&lt;p&gt;I would in no way describe myself as an evangelist of Agile practices, I’m not a certified scrum master and I’ve never had any formal training or anything on Agile practices. However, over the last few years the company I’ve worked for has adopted an agile methodology and so I’ve had no choice but to have had some experience with Agile. Here are some of my thoughts on ‘Agile’, or working with ‘Agility’ or whatever the hell you wanna call it.&lt;/p&gt;

&lt;h2 id=&quot;kanban-and-scrum&quot;&gt;Kanban and Scrum&lt;/h2&gt;

&lt;p&gt;It took me ages to work out what these terms exactly meant. I’m still not 100% sure, but this is my take.&lt;/p&gt;

&lt;p&gt;Kanban I see as basically trello. You work from left to right in a production line type approach. So you’d still have user stories and possibly story points, although I don’t think it’s as important in Kanban and you’d basically move the stories or tickets through the pipe line, from (typically) to-do to done, via some variation of in-progress, merged and ready for testing. I basically see Kanban as a lightweight version of Scrum.&lt;/p&gt;

&lt;p&gt;Scrum for me is the fuller version of Kanban. So you still have the board and the production line approach, but you split work up into sprints, work towards a velocity and plan and demo with the product owner in order to maintain focus on what the product will turn out like. Oh, you have daily ‘scrums’ which are basically stand ups where everyone gets updated. People put a lot of emphasis on this, but for me it’s a minor detail. It just makes sense to catch up daily to update each other?&lt;/p&gt;

&lt;p&gt;It’s this Scrum approach I’m going to be talking most about in the rest of this post.&lt;/p&gt;

&lt;h2 id=&quot;user-stories-are-king&quot;&gt;User Stories are king&lt;/h2&gt;

&lt;p&gt;In my experience, the user stories are &lt;em&gt;the&lt;/em&gt; most important part of the entire process. Without good user stories it makes it really difficult to estimate, get a good idea of velocity and deliver features ready to demonstrate.&lt;/p&gt;

&lt;p&gt;User stories are difficult. When you read one, a good one, it will not appear that way. It will appear as almost too simplistic. Getting to that point however, can be very hard.&lt;/p&gt;

&lt;h3 id=&quot;what-makes-a-good-user-story&quot;&gt;What makes a good user story?&lt;/h3&gt;

&lt;p&gt;This is in my opinion what makes a user story a good one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Describes exactly what the feature should do.&lt;/li&gt;
  &lt;li&gt;Should have no hard dependencies.&lt;/li&gt;
  &lt;li&gt;Should have a list of Acceptance Criteria (AC).&lt;/li&gt;
  &lt;li&gt;Should be short and concise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go into a bit more detail, with some example user stories.&lt;/p&gt;

&lt;p&gt;A bad example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a User I want to see notifications.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A good example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a logged in User, when I am on my dashboard I want to see a list of notifications at the top of the page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s break down this example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a logged in User&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We specify that the User needs to be logged in at this point. If you have various Roles in your application it would make sense to include that in the story also, e.g. &lt;em&gt;As a logged in Editor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;when I am on my dashboard&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, this isn’t perfect. The reason being that this indicates a dependency. What is dashboard? You are assuming in your story that there is a dashboard in place, and thus you can’t work on this story until a dashboard has been created.&lt;/p&gt;

&lt;p&gt;I think this kind of dependency, which I’d call a ‘soft’ dependency is inevitable. You will undoubtedly come up against situations like this. I think there are two things we can do to help here.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Be  mindful when planning that some tickets are undoubtedly going to need to come after others. Although avoid this if possible.&lt;/li&gt;
  &lt;li&gt;Allow user stories to have a Background. If anyone reading this (hi Mum!) has experience with BDD they will likely be familiar with features having a Background, which is basically where you set up the environment for the test. I see these kind of soft dependencies as similar. In our example, the Background would simply be: I have a dashboard in place.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I want to see a list of notifications at the top of the page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Again, this implies some kind of soft dependency, so the background for this ticket may be: There is a notification mechanism in place. The other questions surrounding this part of the story relate to the Acceptance Criteria. How should the notifications look? How many should there be? What determines the &lt;em&gt;top&lt;/em&gt; of the page? These questions should all be answered within the AC for the story.&lt;/p&gt;

&lt;h3 id=&quot;example-of-good-acceptance-criteria&quot;&gt;Example of good Acceptance Criteria&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Notifications should appear in an unordered list.&lt;/li&gt;
  &lt;li&gt;The list should appear at the top of the page, directly beneath the fixed menu.&lt;/li&gt;
  &lt;li&gt;There should be a maximum of 5 notifications displayed.&lt;/li&gt;
  &lt;li&gt;The text of the notifications should be black using the default font of the site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get the idea. The level of detail here is up to the product owner. Some may want complete control over their definition of done, down to pixel sizes and font styles. Others may simply be happy with something a bit more high level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key point is that a good User Story can be understood by the developer and tested against by QA and the product owner/client.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;

&lt;p&gt;I don’t have too much to say on planning. I think if you have good user stories planning is a lot easier. Planning should be short and simple if you’re doing it right. If your stories aren’t good, then planning can end up taking a long time and be fairly painful.&lt;/p&gt;

&lt;p&gt;Estimation can probably be seen as a part of planning. For my money the best way of estimating is &lt;a href=&quot;http://www.boxuk.com/blog/affinity-estimation-what-is-it/&quot;&gt;affinity estimation&lt;/a&gt;. Whether you do this against the backlog at the beginning of the project or in planning at the beginning of each sprint, I don’t think matters too much. I think it makes more sense to do it before each sprint as you will gain more insight of the product and your estimations are likely to be more realistic. However, I can understand that sometimes you need to do it before the project to get an idea of scope.&lt;/p&gt;

&lt;p&gt;Planning is all about green fields, so try and have some fun with it if you can. Fun sprint names, a sense of competitiveness in increasing velocity are all ok in my eyes.&lt;/p&gt;

&lt;h2 id=&quot;its-all-about-the-big-game&quot;&gt;It’s all about the big game&lt;/h2&gt;

&lt;p&gt;For me, as a developer, the demo is &lt;em&gt;the&lt;/em&gt; most important part of the entire process. It is your chance to show off to the product owner and/or client what you have done this sprint. As a keen Football (Soccer) fan I see this very much like the big game at the end of a week of rigorous training.&lt;/p&gt;

&lt;p&gt;I think each sprint should be focussed on the demo. It is where you are shipping the features you’ve been working on. Take pride in this time slot you have, show off a little, be enthusiastic, encourage questions, engage with the audience. I’ve been into demo’s embarrassed at how little there was to show, or worried that something is unfinished, worried it will undoubtedly break in front of an audience. I’m now firmly of the belief that if you find yourself in that situation, you’re doing things wrong.&lt;/p&gt;

&lt;p&gt;If you can’t demonstrate something which you feel is good, working software then your sprint has gone wrong. Perhaps you committed yourself to too much work which you couldn’t deliver. Perhaps your sprint period was too little, 2 weeks seem to be the norm but if you’re features are too big, consider increasing this period? More likely, your user stories were poor, which comes back to why User Stories are king.&lt;/p&gt;

&lt;h2 id=&quot;retrospectives-are-vital&quot;&gt;Retrospectives are vital&lt;/h2&gt;

&lt;p&gt;Sometimes when you feel there is a lot to do, it can be tempting to skip the retrospectives. It’s often seen as a non mandatory part of the process where we all just pat ourselves on the back or if things haven’t gone right, play the blame game. I disagree with this.&lt;/p&gt;

&lt;p&gt;I think Retrospectives are vital in the health of an agile project. They highlight early where things are going wrong or where things are going right. They encourage communication amongst the team and can be quite bonding.&lt;/p&gt;

&lt;p&gt;They should be fun and action focussed.&lt;/p&gt;

&lt;p&gt;I would highly recommend taking a look at &lt;a href=&quot;http://www.plans-for-retrospectives.com&quot;&gt;plans-for-retrospectives.com&lt;/a&gt; for some ideas of fun ‘games’ you can play in your retrospective. We’ve bought some of the hard copies for the office and they’ve been brilliant. The best thing I like about them is that they’re fun but very action focussed. So you don’t just feel like you’re wasting time gassing about the project, you’re actually putting down actions as to how to make things better.&lt;/p&gt;

&lt;h2 id=&quot;jira-is-actually-pretty-great&quot;&gt;Jira is actually pretty great&lt;/h2&gt;

&lt;p&gt;It almost pains me to say it because it’s so frickin expensive, but Jira is actually pretty great. Well, more accurately the Agile (formerly Greenhopper) plugin for Jira is great.&lt;/p&gt;

&lt;p&gt;I think you could probably get a similar experience with something like Trello and a bit of admin work on your side, but Jira just makes it all fit together so nicely. It’s the various reports, especially the burn down charts which I think are it’s greatest features. It’s really excellent, if you can afford it (and can work out the mental user roles management?!) then I would definitely recommend it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have no real conclusions, just some of my thoughts on working Agile. My thoughts are changing all the time, but after a few years working in an Agile way, this is what I think works best.&lt;/p&gt;

&lt;p&gt;I have a habit of waffling, so I hope this all makes sense, I can probably sum up with the following bullet points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User stories are king.&lt;/li&gt;
  &lt;li&gt;Each sprint should focus on the demo, which for me is the most important part of the process.&lt;/li&gt;
  &lt;li&gt;Retrospectives are important.&lt;/li&gt;
  &lt;li&gt;Use Jira (if you can)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, your experiences may be different, and I would love to hear about them!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Bower in a Symfony2 app</title>
   <link href="https://jenko.me/symfony2/2013/12/06/using-bower-in-a-symfony2-app"/>
   <updated>2013-12-06T00:00:00+00:00</updated>
   <id>https://jenko.me/symfony2/2013/12/06/using-bower-in-a-symfony2-app</id>
   <content type="html">
&lt;p&gt;I’ve been hearing good things about &lt;a href=&quot;http://bower.io&quot;&gt;bower&lt;/a&gt; for a while now but never really had the chance to try it. So having recently started a new Symfony2 side project I thought I would take a look at integrating it. It turned out to be very very easy.&lt;/p&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;Well, obviously I needed to install it first. Pretty easy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g bower&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cool. Next up I needed to create a &lt;code&gt;bower.json&lt;/code&gt; file. This is basically &lt;code&gt;composer.json&lt;/code&gt; for front end assets.&lt;/p&gt;

&lt;p&gt;Bower has a nice interactive way of creating this file by simply running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will take you through each step of adding the necessary fields, much like the composer equivalent (&lt;code&gt;composer init&lt;/code&gt; naturally).&lt;/p&gt;

&lt;p&gt;Once I had done that, I had a bower.json file looking something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/7833778.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I won’t go in to too much detail about how bower works, there is some pretty decent docs &lt;a href=&quot;http://bower.io&quot;&gt;on the website&lt;/a&gt; but essentially it is &lt;code&gt;composer&lt;/code&gt; for your front end dependencies.&lt;/p&gt;

&lt;h2 id=&quot;integrating-bower-with-symfony2&quot;&gt;Integrating bower with Symfony2&lt;/h2&gt;

&lt;p&gt;So how did I set this all up in a Symfony2 app? Well very easily, probably easy enough that it doesn’t really require a blog post, but hey, I need to blog more and had some free time.&lt;/p&gt;

&lt;p&gt;So my &lt;code&gt;bower.json&lt;/code&gt; file I simply placed in the root of my project (right there alongside &lt;code&gt;composer.json&lt;/code&gt;) then to get my front end assets, I simply needed to run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sweet, that was easy! Wait though, what is this &lt;code&gt;bower_components&lt;/code&gt; nonsense. I could do without this littering the root of my project. Particularly as the standard in Symfony2 apps is to install front end assets in a &lt;code&gt;Resources/public&lt;/code&gt; location.&lt;/p&gt;

&lt;p&gt;I needed to tell bower to install my assets somewhere else. This was actually really easy too. I needed another file in the root of my project, this time a &lt;code&gt;.bowerrc&lt;/code&gt; file. Here it is:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/7833818.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Pretty neat!&lt;/p&gt;

&lt;p&gt;I was a bit torn as to which was the correct directory for this. I ended up going with &lt;code&gt;src/Acme/Bundle/DemoBundle/Resources/public/vendor&lt;/code&gt; in my main website bundle, but you may decide to put it in &lt;code&gt;app/Resources/public/vendor&lt;/code&gt; or somewhere else altogether, i.e. YMMV.&lt;/p&gt;

&lt;p&gt;So deleting that &lt;code&gt;bower_components&lt;/code&gt; folder and running &lt;code&gt;bower install&lt;/code&gt; again downloaded all the assets in the directory I was happy with. I then realised I wanted to include &lt;a href=&quot;http://getbootstrap.com&quot;&gt;bootstrap&lt;/a&gt; too. Rather than edit the &lt;code&gt;bower.json&lt;/code&gt; though (although that would work) I simply ran:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install bootstrap --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This works more or less exactly like &lt;code&gt;composer require&lt;/code&gt;. It will install the dependency into your specified directory. The &lt;code&gt;--save&lt;/code&gt; switch will ensure it will be added as a dependency to your &lt;code&gt;bower.json&lt;/code&gt; also (I’m not sure why you &lt;em&gt;wouldn’t&lt;/em&gt; want this?!). You can specify a version, but if omitted the latest version will be assumed.&lt;/p&gt;

&lt;h2 id=&quot;using-your-front-end-dependencies&quot;&gt;Using your front end dependencies&lt;/h2&gt;

&lt;p&gt;So we have bower all set up, let’s see how we include these things within our templates.&lt;/p&gt;

&lt;p&gt;Well, pretty much just how you would include CSS/JS normally.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jenkoian/7833806.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;That’s pretty much all there is too it. One thing that I was wondering about at first was the lack of &lt;code&gt;bower.lock&lt;/code&gt; file or equivalent. Without this it means that you can’t rely on libraries being the same versions on different environments (ok you can set exact version numbers, but still). This is a bit of a problem if you want to use bower in production as part of a deploy script for example. &lt;a href=&quot;https://github.com/bower/bower/issues/505&quot;&gt;There is some discussion on this&lt;/a&gt;, but if this is an issue for you, you essentially have 3 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use exact version numbers&lt;/li&gt;
  &lt;li&gt;Commit front end assets&lt;/li&gt;
  &lt;li&gt;Just accept the possibility of a variation in assets across environments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For my side project, option 3 is fine and I happily set the assets directory in my .gitignore file, but I do think a .lock file function is a must for bower going forward.&lt;/p&gt;

&lt;p&gt;All in all though, I think bower is very nice. It does exactly for front end development what composer does for PHP development. It makes managing front end dependencies much much nicer. Hopefully gone are the days of downloading zip files and boshing into your web app.&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going further&lt;/h2&gt;

&lt;p&gt;There is an interesting looking Symfony2 bundle for bower, called &lt;a href=&quot;https://github.com/Spea/SpBowerBundle&quot;&gt;SpBowerBundle&lt;/a&gt;. I didn’t use this in my case as I was after a simple solution and wanted to ensure I was learning about bower rather than a bundle.&lt;/p&gt;

&lt;p&gt;However, having taken a quick look, the bundle looks very nice. I can see it being particularly useful if you want to manage front end dependencies across multiple bundles. The assetic integration also looks good.&lt;/p&gt;

&lt;p&gt;Finally, there was a recent discussion started about the state of the front end and Symfony2 which ultimately led to &lt;a href=&quot;https://github.com/kriswallsmith/assetic/issues/529&quot;&gt;this github issue&lt;/a&gt; so definitely worth keeping your eye on that if you’re interested in this.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://bower.io&quot;&gt;http://bower.io&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://williamdurand.fr/2012/12/24/being-a-frontend-developer-for-a-weekend/&quot;&gt;http://williamdurand.fr/2012/12/24/being-a-frontend-developer-for-a-weekend/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/Spea/SpBowerBundle&quot;&gt;https://github.com/Spea/SpBowerBundle&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Symfony2: Caching a Rest API</title>
   <link href="https://jenko.me/symfony2/2013/01/29/symfony2-caching-a-rest-api"/>
   <updated>2013-01-29T00:00:00+00:00</updated>
   <id>https://jenko.me/symfony2/2013/01/29/symfony2-caching-a-rest-api</id>
   <content type="html">
&lt;p&gt;As part of a project I’m currently working on, I needed to create a Rest API as a facade into an old legacy database.&lt;/p&gt;

&lt;p&gt;Some of the data I was retrieving from this legacy database was quite large and quite complex, one particular endpoint for example would take approx. 10 seconds to load. This is simply far to slow to service the client that would be consuming this data and so it soon became obvious that some caching was required to ensure that data was loaded quickly.&lt;/p&gt;

&lt;p&gt;I knew I needed some kind of data caching, and I had planned to take full advantage of the expiration model of HTTP caching as much as possible, however due to the dynamic nature of the data, I knew I needed a flexible validation model of HTTP caching to ensure maximum efficiency from the API.&lt;/p&gt;

&lt;p&gt;I was in the fortunate position that the client consuming this endpoint was being developed by our team also. Therefore, as long as the Rest API returned appropriate caching headers, I could also set the appropriate caching headers to make use of these within my client. HTTP Caching was a go.&lt;/p&gt;

&lt;p&gt;Symfony2 has excellent support for HTTP Caching. If you haven’t done so already, I would highly recommend &lt;a href=&quot;http://symfony.com/doc/current/book/http_cache.html&quot;&gt;reading the (f****ng) manual on it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I wanted was to cache a particular endpoint “forever” until a record within the result set of the endpoint was updated. So for example, if you hit the following endpoint:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://acme.com/things&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should &lt;strong&gt;always&lt;/strong&gt; return a cached version of &lt;em&gt;things&lt;/em&gt;, unless a &lt;em&gt;thing&lt;/em&gt; has been updated since the last time the endpoint was called.&lt;/p&gt;

&lt;p&gt;So what I needed to do was to work out when a &lt;em&gt;thing&lt;/em&gt; was last updated &lt;strong&gt;before&lt;/strong&gt; the main query was run and change the response.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-last-modified-date&quot;&gt;Getting the last modified date&lt;/h2&gt;

&lt;p&gt;This was simple enough, just add something along the lines of the following to the appropriate repository class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4667994.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So now we have a cheap way of getting the the last modified thing, or a last modified date for our endpoint.&lt;/p&gt;

&lt;h2 id=&quot;using-last-modified-date-to-alter-the-response&quot;&gt;Using last modified date to alter the response&lt;/h2&gt;

&lt;p&gt;The problem I had now was how to look up this date and alter the response if necessary.&lt;/p&gt;

&lt;p&gt;I could have done what they have in &lt;a href=&quot;http://symfony.com/doc/current/book/http_cache.html#validation-with-the-last-modified-header&quot;&gt;the example on the Symfony docs&lt;/a&gt; however this wasn’t very flexible, as it meant adding a lot of duplicated code to every action. I wanted something much more flexible. I wanted to make a controller cacheable with minimum effort required.&lt;/p&gt;

&lt;p&gt;My solution for this was to use a listener:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4668158.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;What this does is before the controller is used, checks to see if it implements “Cacheable” and if it does will check the last modified date and then change the action it will call on the controller (and thus the response) accordingly.&lt;/p&gt;

&lt;p&gt;Here is the code for the interface:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4668261.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So all that’s left to do then is to add three methods as stipulated in our interface - isNotModified(), getLastModifiedDate() and getLastModifiedResponse().&lt;/p&gt;

&lt;p&gt;It makes sense for isNotModified() and getLastModifiedResponse() to live in an abstract parent class as these are unlikely to change across multiple controllers:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4668398.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It is simply then a case of adding a getLastModifiedDate() to the children controllers, for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4668420.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;You should now have an unobtrusive way of setting a 304 response for endpoints on your API. Of course this relies on the appropriate headers being sent by the client consuming this service. This is easy using something like Guzzle, but more on that in another post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Silicon Valleys?</title>
   <link href="https://jenko.me/opinion/2013/01/20/silicon-valleys"/>
   <updated>2013-01-20T00:00:00+00:00</updated>
   <id>https://jenko.me/opinion/2013/01/20/silicon-valleys</id>
   <content type="html">
&lt;p&gt;A little while ago (ok a long while ago, I procrastinate a lot) &lt;a href=&quot;https://twitter.com/drewm/status/265523881446629376&quot;&gt;I noticed someone from the web industry crowd sourcing for somewhere to live&lt;/a&gt;. I looked at the responses they received and noticed a few &lt;a href=&quot;https://twitter.com/emmaboulton/status/265534744857550848&quot;&gt;people recommend South Wales&lt;/a&gt;. As a born and bred South Walian it obviously perked my interest, but it also got me thinking; would South Wales be a good place to live for a web professional?  In this post I aim to answer that very question and to also reflect on why I enjoy living and working in South Wales as a web professional.&lt;/p&gt;

&lt;h2 id=&quot;the-people&quot;&gt;The people&lt;/h2&gt;

&lt;p&gt;The welsh are renowned for there passion, and I could talk about how this is true and even drop a mention for the great welsh rugby team, but as this is a techy blog I will try and keep it relevant.&lt;/p&gt;

&lt;p&gt;There are hard working people all over the world. I’m sure you will be able to find people who work hard wherever you are, nothing here sets Wales apart from the rest. However, nothing should set other places above Wales in this regard either. There is a wide net of passionate developers and designers (UX’ers, content writers, marketeers, managers etc. etc.) throughout South Wales. You will not be short of good people when looking for someone to help you work on that idea you have or when arranging a meet up to discuss that new bit of tech you’ve been experimenting with.&lt;/p&gt;

&lt;h2 id=&quot;the-community&quot;&gt;The community&lt;/h2&gt;

&lt;p&gt;Speaking of meet ups there are a number available for whatever you’re interest may be. Speaking as a developer, there is an excellent meet up called &lt;a href=&quot;http://unifieddiff.co.uk/&quot;&gt;Unified.Diff&lt;/a&gt;, which I’ve had the pleasure of speaking at and would recommend whole heartedly for anyone wanting to learn/speak about software development. If you’re a designer there are a number of conferences and smaller meet ups available, the recent emergence of the &lt;a href=&quot;http://port80events.co.uk/&quot;&gt;Port80&lt;/a&gt; and &lt;a href=&quot;http://www.handheldconf.com/&quot;&gt;Handheld&lt;/a&gt; conferences, both of which received excellent feedback, stand out. There is also the Port80 localhost events and the &lt;a href=&quot;http://www.meetup.com/Cardiff-UX-Bookclub/&quot;&gt;UX book club&lt;/a&gt; if you’re looking for something on a smaller scale.&lt;/p&gt;

&lt;p&gt;If you’re a freelancer you may be looking for co-working space or people in a similar situation as you to have some community when seemingly working alone. The excellent &lt;a href=&quot;http://indycube.com/&quot;&gt;indyCube&lt;/a&gt; is just what you need. &lt;a href=&quot;http://indycube.com/&quot;&gt;IndyCube&lt;/a&gt; is a set of premises set up for freelancers to pay a small fee to use as their office, you get internet access, a desk, chair, the all important tea and coffee facilities and more importantly, people just like you to share an office with and who knows, maybe make new friends/acquaintances/colleagues.&lt;/p&gt;

&lt;h2 id=&quot;the-company&quot;&gt;The company&lt;/h2&gt;

&lt;p&gt;You may have heard about &lt;a href=&quot;http://www.bbc.co.uk/news/business-13969338&quot;&gt;Specific Media buying Myspace with a little help from a certain Mr. Timberlake&lt;/a&gt;. As part of this take over, it was decided that much of &lt;a href=&quot;https://new.myspace.com/&quot;&gt;the new Myspace&lt;/a&gt; development was to be undertaken in the UK. In London you may think, isn’t there some kind of silicon roundabout or something? Well no, a large chunk of the new myspace is being developed right here in South Wales. If it’s good enough for Timberlake, it may just be good enough for you too?&lt;/p&gt;

&lt;p&gt;Of course it’s not just celebrities and world famous brands choosing to innovate and develop right here in South Wales, there are lot of outstanding, industry leading agencies right here in the heart of the country.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://markboultondesign.com/&quot;&gt;influential designers&lt;/a&gt;, to &lt;a href=&quot;http://boxuk.com&quot;&gt;innovative developers&lt;/a&gt; it really is no coincidence that &lt;a href=&quot;http://www.cs.cf.ac.uk/movies/&quot;&gt;one of the most famous websites started right here in the capital city&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-infrastructure&quot;&gt;The infrastructure&lt;/h2&gt;

&lt;p&gt;This is a crucial area as to why South Wales and in particular Cardiff is a great place to start a new chapter in your digital career. As well as being among one of the &lt;a href=&quot;http://yourcardiff.walesonline.co.uk/2012/07/03/cardiff-to-get-fibre-broadband-on-demandif-there-is-any/&quot;&gt;first cities in the UK to get super fast, fibre optic broadband&lt;/a&gt;, Cardiff was also listed among the &lt;a href=&quot;http://www.walesonline.co.uk/news/wales-news/2012/10/30/superfast-4g-mobile-phone-technology-to-be-launched-in-cardiff-today-91466-32128590/&quot;&gt;first cities in the UK to have 4G internet access&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where as perhaps neglected before, Cardiff is now firmly established as one of the brightest cities in the UK and certainly one of the most digitally enhanced. The infrastructure here is first class in aiding you do your online business.&lt;/p&gt;

&lt;p&gt;Of course, if you should be without internet access but badly need it, there is that ever present &lt;a href=&quot;https://itunes.apple.com/gb/app/cdf-hotspots/id558826581?mt=8&quot;&gt;community I was talking about earlier to help you out&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’m sure working in South Wales is not perfect, it is probably still some way off San Francisco or possibly even &lt;a href=&quot;http://www.siliconroundabout.org.uk/about/&quot;&gt;Shoreditch&lt;/a&gt;, however I think it should be given a lot of consideration if you work in the web and are looking for somewhere to setup home in the UK.&lt;/p&gt;

&lt;p&gt;If you don’t mind having to see everything in Welsh as well as English, like being surrounded by passionate people and want a digital infrastructure that’s first class, then come on over, we’ll get the kettle on.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
